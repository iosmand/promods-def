#
#	CARRIAGE 0
#

traffic_trailer : train_car.tram_kon.couple
{
	accessories[]: .tram_kon.couple.tchassis
	accessories[]: .tram_kon.couple.fwheel
	accessories[]: .tram_kon.couple.rwheel

	displacement_limit: 0.0

	prefer_variant: true
	variant[]: train_car.tram_kon.couple.poznan

}
vehicle_accessory: .tram_kon.couple.tchassis
{
	data_path: "/def/vehicle/ai/promods/rail/tram/konstal/chassis_couple.sii"
}

vehicle_wheel_accessory: .tram_kon.couple.fwheel
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/incentro_front.sii"
}

vehicle_wheel_accessory: .tram_kon.couple.rwheel
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/incentro_rear.sii"
}

traffic_trailer : train_car.tram_kon.couple.poznan
{
	accessories[]: .tram_kon.couple.tchassis.poznan
	accessories[]: .tram_kon.couple.fwheel.poznan
	accessories[]: .tram_kon.couple.rwheel.poznan

	displacement_limit: 0.0

	spawn_condition[]: .train_car.tram_kon.couple.poznan.condition.city
}
vehicle_accessory: .tram_kon.couple.tchassis.poznan
{
	data_path: "/def/vehicle/ai/promods/rail/tram/konstal/chassis_couple.sii"
}

vehicle_wheel_accessory: .tram_kon.couple.fwheel.poznan
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/incentro_front.sii"
}

vehicle_wheel_accessory: .tram_kon.couple.rwheel.poznan
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/incentro_rear.sii"
}
traffic_spawn_condition: .train_car.tram_kon.couple.poznan.condition.city
{
	# spawn only near city with specified name
	type: city
	str_param[]: "poznan"
}


#
#	CARRIAGE 0
#

traffic_trailer : train_car.tram_kon.end
{
	accessories[]: .tram_kon.end.tchassis
	accessories[]: .tram_kon.end.fwheel
	accessories[]: .tram_kon.end.rwheel
	accessories[]: .tram_kon.end.rwheel2
	accessories[]: .tram_kon.end.rwheel3

	displacement_limit: 0.0

	prefer_variant: true
	variant[]: train_car.tram_kon.end.poznan	
	
}
vehicle_accessory: .tram_kon.end.tchassis
{
	data_path: "/def/vehicle/ai/promods/rail/tram/konstal/chassis_rear.sii"
}
vehicle_wheel_accessory: .tram_kon.end.fwheel
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/tram_front.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel2
{
	offset: 2
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel3
{
	offset: 4
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}

traffic_trailer : train_car.tram_kon.end.poznan
{
	accessories[]: .tram_kon.end.tchassis.poznan
	accessories[]: .tram_kon.end.fwheel.poznan
	accessories[]: .tram_kon.end.rwheel.poznan
	accessories[]: .tram_kon.end.rwheel2.poznan
	accessories[]: .tram_kon.end.rwheel3.poznan

	displacement_limit: 0.0

	spawn_condition[]: .train_car.tram_kon.end.poznan.condition.city
}
vehicle_accessory: .tram_kon.end.tchassis.poznan
{
	data_path: "/def/vehicle/ai/promods/rail/tram/konstal/chassis_rear.poznan.sii"
}
vehicle_wheel_accessory: .tram_kon.end.fwheel.poznan
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/tram_front.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel.poznan
{
	offset: 0
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel2.poznan
{
	offset: 2
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}

vehicle_wheel_accessory: .tram_kon.end.rwheel3.poznan
{
	offset: 4
	data_path: "/def/vehicle/ai_wheel/tram_rear.sii"
}
traffic_spawn_condition: .train_car.tram_kon.end.poznan.condition.city
{
	# spawn only near city with specified name
	type: city
	str_param[]: "poznan"
}